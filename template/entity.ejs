<% if (root) { %>export default <% } %>class <%= schema.title %> {
  constructor(params) {
    const {
      <%_ Object.keys(schema.properties).forEach(function(prop) { _%>
      <%- _.camelCase(prop) %>,
      <%_ }) _%>
    } = params;

    <%_ Object.keys(schema.properties).forEach(function(prop) { _%>
    this.<%- _.camelCase(prop) %> = <%- _.camelCase(prop) %>;
    <%_ }) _%>
  }

  static fromJson(json) {
    return new <%= schema.title %>({
<%_ Object.keys(schema.properties).forEach(function(prop) { _%>
  <%_ var classAlias = root ? '' : schema.title _%>
  <%_ if (schema.properties[prop].type === 'object') { _%>
      <%- _.camelCase(prop) %>: <%- classAlias + _.upperFirst(_.camelCase(prop)) %>.fromJson(json.<%- prop %>),
  <%_ } else if (schema.properties[prop].type === 'array') { _%>
      <%- _.camelCase(prop) %>: json.<%- prop %>.map((item) => <%- classAlias + _.upperFirst(_.camelCase(singular(prop))) %>.fromJson(item)), %>
  <%_ } else { _%>
      <%- _.camelCase(prop) %>: json.<%- prop %>,
  <%_ } _%>
<%_ }) _%>
    });
  }
}

<%_ childEntities.forEach(function(childEntity) { _%>
<%- childEntity _%>
<%_ }); _%>
